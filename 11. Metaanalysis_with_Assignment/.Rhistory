# Example of lazy evaluation in ggplot2:
library(ggplot2)
View(iris)
# This works:
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +theme_classic()
# let's misspell name of one variable (on purpose)
ggplot(data = iris, aes(x = Sepal.Length2, y = Sepal.Width, color = Species)) +
geom_point()+theme_classic()
# Former code result in error, but belowed does not:
p <- ggplot(data = iris, aes(x = Sepal.Length2, y = Sepal.Width, color = Species)) +
geom_point()+theme_classic()
# And now error is raised:
p
?median
mdev <- function(x){
m <- mean(x)
vec <- c()
for (i in length(x)){
n <- x[i] - m
vec[i] <-abs(n)
}
y <- median(vec)
return (y)
}
mdev(x)
x <- 1:10
mdev(x)
mdev <- function(x){
m <- mean(x)
print(m)
vec <- c()
for (i in length(x)){
n <- x[i] - m
vec[i] <-abs(n)
print(vec)
}
y <- median(vec)
return (y)
}
mdev(x)
[i]
mdev <- function(x){
m <- mean(x)
print(m)
vec <- c()
for (i in length(x)){
n <- x[i] - m
print(n)
vec[i] <-abs(n)
print(vec)
}
y <- median(vec)
return (y)
}
mdev(x)
mdev <- function(x){
m <- mean(x)
print(m)
vec <- c()
for (i in (1:length(x))){
n <- x[i] - m
print(n)
vec[i] <-abs(n)
print(vec)
}
y <- median(vec)
return (y)
}
mdev(x)
# For test use following data:
library(MASS)
data(survey)
# For test use following data:
library(MASS)
data <- data(survey)
View(survey)
?stderr
coeff(survey$Height)
coeff <- function(x){
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
return(cov)
}
coeff(survey$Height)
coeff <- function(x){
x <- as.numeric(x)
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
return(cov)
}
coeff(survey$Height)
coeff <- function(x){
x <- as.numeric(x)
x <- na.omit(x)
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
return(cov)
}
coeff(survey$Height)
# a) parameter, which allows user to decide, whether result will be printed as
#    fraction or in percentages points.
func3 <- function(x, pp = T){
x <- as.numeric(x)
x <- na.omit(x)
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp = T){
# a) parameter, which allows user to decide, whether result will be printed as
#    fraction or in percentages points.
func3 <- function(x, pp == T){
# a) parameter, which allows user to decide, whether result will be printed as
#    fraction or in percentages points.
func3 <- function(x, pp == T){
# a) parameter, which allows user to decide, whether result will be printed as
#    fraction or in percentages points.
func3 <- function(x, pp = T){
x <- as.numeric(x)
x <- na.omit(x)
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
func3(survey$Height)
# b) ability to control, whether NA's are included in computations.
func4 <- function(x, pp = T, nainc = F){
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
func4(survey$Height, T, T)
func5 <- function(x, pp = T, nainc = F){
if (is.vector(x) == F){
return(print('error'))
}
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey$Height)
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey, 'Age')
func5 <- function(x, pp = T, nainc = F){
if (is.data.frame(x) == F){
return(print('error'))
}
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey, 'Age')
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey['Age'])
func5 <- function(x, pp = T, nainc = F){
if (is.data.frame(x) == F){
return(print('error'))
}
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
func5 <- function(x, pp = T, nainc = F){
if (is.data.frame(x) == F){
return(print('error'))
}
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
rho <- sd(x)
nu <- mean(x)
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey['Age'])
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey[, 1:3])
View(survey)
?function
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey[, 'NW_Hnd'])
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey[ , 3])
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey[ , 2:3])
print(survey[, 2:3])
func5 <- function(x, pp = T, nainc = F){
if (is.data.frame(x) == F){
return(print('error'))
}
x <- as.numeric(x)
if (nainc == T){
x <- x
}
else{
x <- na.omit(x)
}
for (i in ncol(x)){
rho <- sd(x[, i])
nu <- mean(x[, i])
cov <- rho/nu
if (pp == T){
return (cov*100)
}
else {
return (cov)
}
}
}
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(survey[ , 2:3])
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(x = survey[ , 2:3], T, F)
# c) write two versions of the function:
#     c1) first should work with vectors, thus:
func5(x = (survey[ , 2:3]), T, F)
exc1(Cars93)
exc1 <- function(data){
for (i in 1:ncol(data)){
if (is.integer(data[, i])){
boxplot(data[, i], main = as.character(colnames(data)[i]))
}else if (is.numeric(data[, i]) == TRUE & is.integer(data[, i] == FALSE)){
hist(data[, i])
}else if (is.factor(data[, i])){
barplot(table(data[, i]))
} else{
print('error')
}
}
}
exc1(Cars93)
install.packages('kernlab')
library(kernlab)
# Import database
movies <- read.csv('Data/top250.csv',sep=';',dec=',')
gwd()
cwd()
library(ggplot2)
library(dplyr)
library(scales)
library(RColorBrewer)
library(forcats)
install.packages("languageserver")
getwd()
setwd("~/ARUE_Kubara/project/RRcourse2025")
setwd("~/ARUE_Kubara/project/RRcourse2025/11. Metaanalysis")
#| label = "setup",
#| include = FALSE
library(meta)
library(metafor)
library(dplyr)
#setwd("")
library(readxl)
file_path <- "data/metaanalysis_data.xlsx"
data <- read_excel(file_path)
head(data)
str(data)
#compare time on boy toys by boys and girls -> compare time on girl toys by boys and girl
m.raw <- metacont(n.e=N_boys,
mean.e=Mean_boys_play_male,
sd.e=SD_boys_play_male,
n.c=N_girls,
mean.c=Mean_girls_play_male,
sd.c=SD_girls_play_male,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
meta::metacont
#compare time on boy toys by boys and girls -> compare time on girl toys by boys and girl
m.raw <- metacont(n.e=N_boys,
mean.e=Mean_boys_play_male,
sd.e=SD_boys_play_male,
n.c=N_girls,
mean.c=Mean_girls_play_male,
sd.c=SD_girls_play_male,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
#compare time on boy toys by boys and girls -> compare time on girl toys by boys and girl
m.raw <- meta::metacont(n.e=N_boys,
mean.e=Mean_boys_play_male,
sd.e=SD_boys_play_male,
n.c=N_girls,
mean.c=Mean_girls_play_male,
sd.c=SD_girls_play_male,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
m.raw
library(readxl)
file_path <- "data/metaanalysis_data.xlsx"
data <- read_excel(file_path)
head(data)
#| label = "setup",
#| include = FALSE
library(meta)
library(metafor)
library(dplyr)
#setwd("")
#compare time on boy toys by boys and girls -> compare time on girl toys by boys and girl
m.raw <- meta::metacont(n.e=N_boys,
mean.e=Mean_boys_play_male,
sd.e=SD_boys_play_male,
n.c=N_girls,
mean.c=Mean_girls_play_male,
sd.c=SD_girls_play_male,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
m.raw
#compare time on boy toys by boys and girls -> compare time on girl toys by boys and girl
m.raw1 <- meta::metacont(n.e=N_boys,
mean.e=Mean_boys_play_male,
sd.e=SD_boys_play_male,
n.c=N_girls,
mean.c=Mean_girls_play_male,
sd.c=SD_girls_play_male,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
m.raw1
m.raw2 <- meta::metacont(n.e=N_boys,
mean.e=Mean_boys_play_female,
sd.e=SD_boys_play_female,
n.c=N_girls,
mean.c=Mean_girls_play_female,
sd.c=SD_girls_play_female,
data=data,
studlab=paste(Study),
comb.fixed = TRUE,
comb.random = TRUE,
)
m.raw1 %>% funnel()
m.raw1 %>% funnel()
contour_levels <- c(0.90, 0.95, 0.99)
contour_colors <- c("darkblue", "blue", "lightblue")
funnel(m, contour = contour_levels, col.contour = contour_colors)
m.raw1 %>% funnel()
contour_levels <- c(0.90, 0.95, 0.99)
contour_colors <- c("darkblue", "blue", "lightblue")
funnel(m.raw1, contour = contour_levels, col.contour = contour_colors)
legend("topright", c("p < 0.10", "p < 0.05", "p < 0.01"), bty = "n", fill = contour_colors)
contour_levels <- c(0.90, 0.95, 0.99)
contour_colors <- c("darkblue", "blue", "lightblue")
funnel(m.raw1, contour = contour_levels, col.contour = contour_colors)
legend("topright", c("p < 0.10", "p < 0.05", "p < 0.01"), bty = "n", fill = contour_colors)
funnel(m.raw2, contour = contour_levels, col.contour = contour_colors)
legend("topright", c("p < 0.10", "p < 0.05", "p < 0.01"), bty = "n", fill = contour_colors)
m.raw1 %>% forest(sortvar=TE)
m.raw2 %>% forest(sortvar=TE)
contour_levels <- c(0.90, 0.95, 0.99)
contour_colors <- c("darkblue", "blue", "lightblue")
funnel(m.raw1, contour = contour_levels, col.contour = contour_colors)
legend("topright", c("p < 0.10", "p < 0.05", "p < 0.01"), bty = "n", fill = contour_colors)
funnel(m.raw2, contour = contour_levels, col.contour = contour_colors)
legend("topright", c("p < 0.10", "p < 0.05", "p < 0.01"), bty = "n", fill = contour_colors)
m.raw1 %>% metareg(`Year` + `Neutral Toys` + `Country` + `Age (months)`)
m.raw1 %>% metareg(`Year` + `Neutral toys` + `Country` + `Age (months)`)
m.raw2 %>% metareg(`Year` + `Neutral toys` + `Country` + `Age (months)`)
View(data)
m.raw1 %>% metareg(`Male authors` +  `Female authors`)
m.raw1 %>% metareg(`Male authors` +  `Female authors`)
m.raw2 %>% metareg(`Male authors` +  `Female authors`)
m.raw1 %>% forest(sortvar=TE)
m.raw2 %>% forest(sortvar=TE)
